"use strict";(self.webpackChunkapex_fp_docs=self.webpackChunkapex_fp_docs||[]).push([[997],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),s=c(n),m=i,k=s["".concat(r,".").concat(m)]||s[m]||d[m]||l;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=s;var p={};for(var r in t)hasOwnProperty.call(t,r)&&(p[r]=t[r]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var c=2;c<l;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},7291:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return r},metadata:function(){return c},toc:function(){return u},default:function(){return s}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],p={sidebar_position:1},r="SObjectCollection",c={unversionedId:"api/collection/sobject-collection",id:"api/collection/sobject-collection",isDocsHomePage:!1,title:"SObjectCollection",description:"SObjectCollection is an eager collection of SObject instances.",source:"@site/docs/api/collection/sobject-collection.md",sourceDirName:"api/collection",slug:"/api/collection/sobject-collection",permalink:"/apex-fp/api/collection/sobject-collection",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Basic concepts",permalink:"/apex-fp/"},next:{title:"DoubleCollection",permalink:"/apex-fp/api/collection/double-collection"}},u=[{value:"<code>of</code>",id:"of",children:[]},{value:"<code>isEmpty</code>",id:"isempty",children:[]},{value:"<code>difference</code>",id:"difference",children:[]},{value:"<code>filter</code>",id:"filter",children:[]},{value:"<code>remove</code>",id:"remove",children:[]},{value:"pluck",id:"pluck",children:[{value:"<code>pluckBooleans</code>",id:"pluckbooleans",children:[]},{value:"<code>pluckDates</code>",id:"pluckdates",children:[]},{value:"<code>pluckDatetimes</code>",id:"pluckdatetimes",children:[]},{value:"<code>pluckDecimals</code>",id:"pluckdecimals",children:[]},{value:"<code>pluckIds</code>",id:"pluckids",children:[]},{value:"<code>pluckStrings</code>",id:"pluckstrings",children:[]}]},{value:"groupBy",id:"groupby",children:[{value:"<code>groupByBooleans</code>",id:"groupbybooleans",children:[]},{value:"<code>groupByDates</code>",id:"groupbydates",children:[]},{value:"<code>groupByDatetimes</code>",id:"groupbydatetimes",children:[]},{value:"<code>groupByDecimals</code>",id:"groupbydecimals",children:[]},{value:"<code>groupByIds</code>",id:"groupbyids",children:[]},{value:"<code>groupByStrings</code>",id:"groupbystrings",children:[]}]},{value:"<code>pick</code>",id:"pick",children:[]},{value:"<code>mapAll</code>",id:"mapall",children:[]},{value:"<code>mapSome</code>",id:"mapsome",children:[]},{value:"mapTo",id:"mapto",children:[{value:"<code>mapToDecimal</code>",id:"maptodecimal",children:[]},{value:"<code>mapToDouble</code>",id:"maptodouble",children:[]}]}],d={toc:u};function s(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sobjectcollection"},"SObjectCollection"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SObjectCollection")," is an eager collection of ",(0,l.kt)("inlineCode",{parentName:"p"},"SObject")," instances."),(0,l.kt)("h2",{id:"of"},(0,l.kt)("inlineCode",{parentName:"h2"},"of")),(0,l.kt)("p",null,"Constructs an ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectCollection")," with the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"Iterable<SObject>")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Set<SObject>"),". "),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"static SObjectCollection of(Iterable<SObject> records)\nstatic SObjectCollection of(Set<SObject> records)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"SObjectCollection.of([SELECT Id, Name, Amount FROM Opportunity WHERE Amount > 10000]);\nSObjectCollection.of(Trigger.new);\n")),(0,l.kt)("h2",{id:"isempty"},(0,l.kt)("inlineCode",{parentName:"h2"},"isEmpty")),(0,l.kt)("p",null,"Returns true is the collection contains no elements, false otherwise."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"Boolean isEmpty()\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"SObjectCollection.of(new List<SObject>()).isEmpty(); // true\nSObjectCollection.of(new List<Opportunity>{new Opportunity()}).isEmpty(); // false\n")),(0,l.kt)("h2",{id:"difference"},(0,l.kt)("inlineCode",{parentName:"h2"},"difference")),(0,l.kt)("p",null,"Returns a collection view of those records that are not equal in the ",(0,l.kt)("inlineCode",{parentName:"p"},"other")," collection, considering only ",(0,l.kt)("inlineCode",{parentName:"p"},"comparisonFields")," in the comparison."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"SObjectCollection difference(SObjectCollection other, Set<Schema.SObjectField> comparisonFields)\n")),(0,l.kt)("h2",{id:"filter"},(0,l.kt)("inlineCode",{parentName:"h2"},"filter")),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectCollection")," view of records that satisfied ",(0,l.kt)("inlineCode",{parentName:"p"},"predicate"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"SObjectCollection filter(SObjectPredicate predicate)\n")),(0,l.kt)("p",null,"Two predicates are provided out of the box, ",(0,l.kt)("inlineCode",{parentName:"p"},"FieldsMatch")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"RecordMatch"),". They are instantiated through factory methods on ",(0,l.kt)("inlineCode",{parentName:"p"},"Match"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"// List<Account> accounts = ...\nSObjectCollection accountCollection = SObjectCollection.of(accounts);\n\nAccount prototype = new Account(Name = 'Foo');\nSObjectCollection recordMatched = accountCollection.filter(Match.record(prototype));\n\nSObjectCollection filtered = accountCollection.filter(Match.field(Account.Name).equals('Foo').also(Account.AnnualRevenue).greaterThan(100000));\n")),(0,l.kt)("h2",{id:"remove"},(0,l.kt)("inlineCode",{parentName:"h2"},"remove")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"remove")," works just like ",(0,l.kt)("inlineCode",{parentName:"p"},"filter"),", but records which match a predicate are ",(0,l.kt)("em",{parentName:"p"},"removed")," from the collection view instead of kept."),(0,l.kt)("h2",{id:"pluck"},"pluck"),(0,l.kt)("h3",{id:"pluckbooleans"},(0,l.kt)("inlineCode",{parentName:"h3"},"pluckBooleans")),(0,l.kt)("p",null,"Plucks ",(0,l.kt)("inlineCode",{parentName:"p"},"Boolean")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Boolean> pluckBooleans(Schema.SObjectField field)\nList<Boolean> pluckBooleans(String relation)\n")),(0,l.kt)("h3",{id:"pluckdates"},(0,l.kt)("inlineCode",{parentName:"h3"},"pluckDates")),(0,l.kt)("p",null,"Plucks ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Date> pluckDates(Schema.SObjectField field)\nList<Date> pluckDates(String relation)\n")),(0,l.kt)("h3",{id:"pluckdatetimes"},(0,l.kt)("inlineCode",{parentName:"h3"},"pluckDatetimes")),(0,l.kt)("p",null,"Plucks ",(0,l.kt)("inlineCode",{parentName:"p"},"Datetime")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Datetime> pluckDatetimes(Schema.SObjectField field)\nList<Datetime> pluckDatetimes(String relation)\n")),(0,l.kt)("h3",{id:"pluckdecimals"},(0,l.kt)("inlineCode",{parentName:"h3"},"pluckDecimals")),(0,l.kt)("p",null,"Plucks numerical values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Decimal> pluckDecimals(Schema.SObjectField field)\nList<Decimal> pluckDecimals(String relation)\n")),(0,l.kt)("h3",{id:"pluckids"},(0,l.kt)("inlineCode",{parentName:"h3"},"pluckIds")),(0,l.kt)("p",null,"Plucks ",(0,l.kt)("inlineCode",{parentName:"p"},"Id")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"Id")," field."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Id> pluckIds(Schema.SObjectField field)\nList<Id> pluckIds(String relation)\nList<Id> pluckIds()\n")),(0,l.kt)("h3",{id:"pluckstrings"},(0,l.kt)("inlineCode",{parentName:"h3"},"pluckStrings")),(0,l.kt)("p",null,"Plucks ",(0,l.kt)("inlineCode",{parentName:"p"},"String")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<String> pluckStrings(Schema.SObjectField field)\nList<String> pluckStrings(String relation)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Opportunity> opportunities = new List<Opportunity>{\n    new Opportunity(Name = 'Opp1', Account = new Account(Name = 'Acc1')),\n    new Opportunity(Name = 'Opp2, Account = new Account(Name = 'Acc2'))\n};\nList<String> opportunityFieldNames = SObjectCollection.of(opportunities).pluckStrings(Opportunity.Name); // ['Opp1', 'Opp2']\nList<String> opportunityRelationNames = SObjectCollection.of(opportunities).pluckStrings('Name'); // ['Opp1' 'Opp2']\nList<String> accountRelationNames = SObjectCollection.of(opportunities).pluckStrings('Account.Name'); // ['Acc1', 'Acc2']\n")),(0,l.kt)("h2",{id:"groupby"},"groupBy"),(0,l.kt)("h3",{id:"groupbybooleans"},(0,l.kt)("inlineCode",{parentName:"h3"},"groupByBooleans")),(0,l.kt)("p",null,"Groups records by ",(0,l.kt)("inlineCode",{parentName:"p"},"Boolean")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"apiFieldName"),", with an optional strong ",(0,l.kt)("inlineCode",{parentName:"p"},"listType"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"Map<Boolean, List<SObject>> groupByBooleans(String apiFieldName, Type listType)\nMap<Boolean, List<SObject>> groupByBooleans(String apiFieldName)\nMap<Boolean, List<SObject>> groupByBooleans(Schema.SObjectField field, Type listType)\nMap<Boolean, List<SObject>> groupByBooleans(Schema.SObjectField field)\n")),(0,l.kt)("h3",{id:"groupbydates"},(0,l.kt)("inlineCode",{parentName:"h3"},"groupByDates")),(0,l.kt)("p",null,"Groups records by ",(0,l.kt)("inlineCode",{parentName:"p"},"Date")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"apiFieldName"),", with an optional strong ",(0,l.kt)("inlineCode",{parentName:"p"},"listType"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"Map<Date, List<SObject>> groupByDates(String apiFieldName, Type listType)\nMap<Date, List<SObject>> groupByDates(String apiFieldName)\nMap<Date, List<SObject>> groupByDates(Schema.SObjectField field, Type listType)\nMap<Date, List<SObject>> groupByBooleans(Schema.SObjectField field)\n")),(0,l.kt)("h3",{id:"groupbydatetimes"},(0,l.kt)("inlineCode",{parentName:"h3"},"groupByDatetimes")),(0,l.kt)("p",null,"Groups records by ",(0,l.kt)("inlineCode",{parentName:"p"},"Datetime")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"apiFieldName"),", with an optional strong ",(0,l.kt)("inlineCode",{parentName:"p"},"listType"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"Map<Datetime, List<SObject>> groupByDatetimes(String apiFieldName, Type listType)\nMap<Datetime, List<SObject>> groupByDatetimes(String apiFieldName)\nMap<Datetime, List<SObject>> groupByDatetimes(Schema.SObjectField field, Type listType)\nMap<Datetime, List<SObject>> groupByDatetimes(Schema.SObjectField field)\n")),(0,l.kt)("h3",{id:"groupbydecimals"},(0,l.kt)("inlineCode",{parentName:"h3"},"groupByDecimals")),(0,l.kt)("p",null,"Groups records by numeric values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"apiFieldName"),", with an optional strong ",(0,l.kt)("inlineCode",{parentName:"p"},"listType"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"Map<Decimal, List<SObject>> groupByDecimals(String apiFieldName, Type listType)\nMap<Decimal, List<SObject>> groupByDecimals(String apiFieldName)\nMap<Decimal, List<SObject>> groupByDecimals(Schema.SObjectField field, Type listType)\nMap<Decimal, List<SObject>> groupByDecimals(Schema.SObjectField field)\n")),(0,l.kt)("h3",{id:"groupbyids"},(0,l.kt)("inlineCode",{parentName:"h3"},"groupByIds")),(0,l.kt)("p",null,"Groups records by ",(0,l.kt)("inlineCode",{parentName:"p"},"Id")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"apiFieldName"),", with an optional strong ",(0,l.kt)("inlineCode",{parentName:"p"},"listType"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"Map<Id, List<SObject>> groupByIds(String apiFieldName, Type listType)\nMap<Id, List<SObject>> groupByIds(String apiFieldName)\nMap<Id, List<SObject>> groupByIds(Schema.SObjectField field, Type listType)\nMap<Id, List<SObject>> groupByIds(Schema.SObjectField field)\n")),(0,l.kt)("h3",{id:"groupbystrings"},(0,l.kt)("inlineCode",{parentName:"h3"},"groupByStrings")),(0,l.kt)("p",null,"Groups records by ",(0,l.kt)("inlineCode",{parentName:"p"},"String")," values at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"apiFieldName"),", with an optional strong ",(0,l.kt)("inlineCode",{parentName:"p"},"listType"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"Map<String, List<SObject>> groupByStrings(String apiFieldName, Type listType)\nMap<String, List<SObject>> groupByStrings(String apiFieldName)\nMap<String, List<SObject>> groupByStrings(Schema.SObjectField field, Type listType)\nMap<String, List<SObject>> groupByStrings(Schema.SObjectField field)\n")),(0,l.kt)("h2",{id:"pick"},(0,l.kt)("inlineCode",{parentName:"h2"},"pick")),(0,l.kt)("p",null,"Returns a new ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectCollection")," view of the collection which keeps just the specified ",(0,l.kt)("inlineCode",{parentName:"p"},"fields"),", discarding others. Helps reduce overwriting potential for concurrent updates when locking is not an option."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"SObjectCollection pick(List<Schema.SObjectField> fields)\nSObjectCollection pick(Set<Schema.SObjectField> fields) \nSObjectCollection pick(List<String> apiFieldNames)\nSObjectCollection pick(Set<String> apiFieldNames)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Opportunity> opportunities = new List<Opportunity>{\n    new Opportunity(Name = 'Foo', Amount = 10000, Description = 'Bar')\n}\n// Picked contains just Name and Amount fields. Description is not present.\nSObjectCollection picked = SObjectCollection.of(opportunities).pick(new Set<String>{'Name', 'Amount'});\n")),(0,l.kt)("h2",{id:"mapall"},(0,l.kt)("inlineCode",{parentName:"h2"},"mapAll")),(0,l.kt)("p",null,"Maps all elements of ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectCollection")," view into another ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectCollection")," view with the provided ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectToSObjectFunction"),"-implementing function ",(0,l.kt)("inlineCode",{parentName:"p"},"fn"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"SObjectCollection mapAll(SObjectToSObjectFunction fn)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"private class DoubleAmount implements SObjectToSObjectFunction {\n    public SObject apply(SObject record) {\n        record.put('Amount', 2 * (Decimal) record.get('Amount'));\n        return record;\n    }\n}\n\nList<Opportunity> opps = new List<Opportunity>{\n    new Opportunity(Amount = 100),\n    new Opportunity(Amount = 150)\n};\n\nSObjectCollection.of(opps).mapAll(new DoubleAmount()); // amounts have been doubled\n")),(0,l.kt)("h2",{id:"mapsome"},(0,l.kt)("inlineCode",{parentName:"h2"},"mapSome")),(0,l.kt)("p",null,"Returns a new ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectCollection")," view formed by mapping those view elements that satisfy ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectPredicate"),"-implementing ",(0,l.kt)("inlineCode",{parentName:"p"},"predicate")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"SObjectToSObject"),"-implementing function ",(0,l.kt)("inlineCode",{parentName:"p"},"fn"),", and keeping those that do not unchanged."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"SObjectCollection mapSome(SObjectPredicate predicate, SObjectToSObjectFunction fn)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"private class DoubleAmount implements SObjectToSObjectFunction {\n    public SObject apply(SObject record) {\n        record.put('Amount', 2 * (Decimal) record.get('Amount'));\n        return record;\n    }\n}\n\nList<Opportunity> opps = new List<Opportunity>{\n    new Opportunity(Amount = 100),\n    new Opportunity(Amount = 150)\n};\n\nSObjectCollection.of(opps).mapSome(Match.field('Amount').gt(120), new DoubleAmount()); // 100 remains, but 150 has been doubled to 300\n")),(0,l.kt)("h2",{id:"mapto"},"mapTo"),(0,l.kt)("h3",{id:"maptodecimal"},(0,l.kt)("inlineCode",{parentName:"h3"},"mapToDecimal")),(0,l.kt)("p",null,"Maps a numeric field at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation")," to a ",(0,l.kt)("inlineCode",{parentName:"p"},"DecimalCollection"),". This is similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"pluckDecimals"),", but unlike a raw ",(0,l.kt)("inlineCode",{parentName:"p"},"List<Decimal>")," returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"DecimalCollection")," which provides further functions."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"DecimalCollection mapToDecimal(Schema.SObjectField field)\nDecimalCollection mapToDecimal(String relation)\n")),(0,l.kt)("h3",{id:"maptodouble"},(0,l.kt)("inlineCode",{parentName:"h3"},"mapToDouble")),(0,l.kt)("p",null,"Maps a numeric field at ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"relation")," to a ",(0,l.kt)("inlineCode",{parentName:"p"},"DoubleCollection"),". This is similar to ",(0,l.kt)("inlineCode",{parentName:"p"},"pluckDoubles"),", but unlike a raw ",(0,l.kt)("inlineCode",{parentName:"p"},"List<Double>")," returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"DoubleCollection")," which provides further functions."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Signature")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"DoubleCollection mapToDouble(Schema.SObjectField field)\nDoubleCollection mapToDouble(String relation)\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Example")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-apex"},"List<Opportunity> opps = new List<Opportunity>{\n    new Opportunity(Amount = 100),\n    new Opportunity(Amount = 150)\n};\n\nDouble average = SObjectCollection.of(opps).mapToDouble(Opportunity.Amount).average();\n")))}s.isMDXComponent=!0}}]);