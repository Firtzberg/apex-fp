"use strict";(self.webpackChunkapex_fp_docs=self.webpackChunkapex_fp_docs||[]).push([[522],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return h}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=p(t),h=r,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||i;return t?a.createElement(m,l(l({ref:n},s),{},{components:t})):a.createElement(m,l({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},123:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return u}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),l=["components"],o={},c="IncompleteFieldsMatch",p={unversionedId:"api/function/incomplete-fields-match",id:"api/function/incomplete-fields-match",isDocsHomePage:!1,title:"IncompleteFieldsMatch",description:"IncompleteFieldsMatch starts the fluent interface for building a FieldsMatch. Adding a condition through methods on the IncompleteFieldsMatch yields a FieldsMatch, which is an SObjectPredicate. The process can be continued to add more field conditions.",source:"@site/docs/api/function/incomplete-fields-match.md",sourceDirName:"api/function",slug:"/api/function/incomplete-fields-match",permalink:"/apex-fp/api/function/incomplete-fields-match",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FieldsMatch",permalink:"/apex-fp/api/function/fields-match"},next:{title:"Match",permalink:"/apex-fp/api/function/match"}},s=[{value:"<code>equals</code> (alias <code>eq</code>)",id:"equals-alias-eq",children:[]},{value:"<code>notEquals</code> (alias <code>neq</code>)",id:"notequals-alias-neq",children:[]},{value:"<code>lessThan</code> (alias <code>lt</code>)",id:"lessthan-alias-lt",children:[]},{value:"<code>lessThanOrEquals</code> (alias <code>leq</code>)",id:"lessthanorequals-alias-leq",children:[]},{value:"<code>greaterThan</code> (alias <code>gt</code>)",id:"greaterthan-alias-gt",children:[]},{value:"<code>greaterThanOrEquals</code> (alias <code>geq</code>)",id:"greaterthanorequals-alias-geq",children:[]},{value:"<code>hasValue</code>",id:"hasvalue",children:[]},{value:"<code>isIn</code>",id:"isin",children:[]},{value:"<code>isNotIn</code> (alias <code>notIn</code>)",id:"isnotin-alias-notin",children:[]}],d={toc:s};function u(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"incompletefieldsmatch"},(0,i.kt)("inlineCode",{parentName:"h1"},"IncompleteFieldsMatch")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"IncompleteFieldsMatch")," starts the fluent interface for building a ",(0,i.kt)("inlineCode",{parentName:"p"},"FieldsMatch"),". Adding a condition through methods on the ",(0,i.kt)("inlineCode",{parentName:"p"},"IncompleteFieldsMatch")," yields a ",(0,i.kt)("inlineCode",{parentName:"p"},"FieldsMatch"),", which is an ",(0,i.kt)("inlineCode",{parentName:"p"},"SObjectPredicate"),". The process can be continued to add more field conditions."),(0,i.kt)("h2",{id:"equals-alias-eq"},(0,i.kt)("inlineCode",{parentName:"h2"},"equals")," (alias ",(0,i.kt)("inlineCode",{parentName:"h2"},"eq"),")"),(0,i.kt)("p",null,"Defines an equality comparison condition for the current field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch equals(Object value)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch eq(Object value)\n")),(0,i.kt)("h2",{id:"notequals-alias-neq"},(0,i.kt)("inlineCode",{parentName:"h2"},"notEquals")," (alias ",(0,i.kt)("inlineCode",{parentName:"h2"},"neq"),")"),(0,i.kt)("p",null,"Defines an inequality comparison condition for the current field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch notEquals(Object value)\n")),(0,i.kt)("h2",{id:"lessthan-alias-lt"},(0,i.kt)("inlineCode",{parentName:"h2"},"lessThan")," (alias ",(0,i.kt)("inlineCode",{parentName:"h2"},"lt"),")"),(0,i.kt)("p",null,"Defines a less than comparison condition for the current field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch lessThan(Object value)\n")),(0,i.kt)("h2",{id:"lessthanorequals-alias-leq"},(0,i.kt)("inlineCode",{parentName:"h2"},"lessThanOrEquals")," (alias ",(0,i.kt)("inlineCode",{parentName:"h2"},"leq"),")"),(0,i.kt)("p",null,"Defines a less than or equals condition for the current field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch lessThanOrEquals(Object value)\n")),(0,i.kt)("h2",{id:"greaterthan-alias-gt"},(0,i.kt)("inlineCode",{parentName:"h2"},"greaterThan")," (alias ",(0,i.kt)("inlineCode",{parentName:"h2"},"gt"),")"),(0,i.kt)("p",null,"Defines a greater than condition for the current field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch greaterThan(Object value)\n")),(0,i.kt)("h2",{id:"greaterthanorequals-alias-geq"},(0,i.kt)("inlineCode",{parentName:"h2"},"greaterThanOrEquals")," (alias ",(0,i.kt)("inlineCode",{parentName:"h2"},"geq"),")"),(0,i.kt)("p",null,"Defines a greater than or equals condition for the current field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch greaterThanOrEquals(Object value)\n")),(0,i.kt)("h2",{id:"hasvalue"},(0,i.kt)("inlineCode",{parentName:"h2"},"hasValue")),(0,i.kt)("p",null,"Defines a non-null condition for the current field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch hasValue()\n")),(0,i.kt)("h2",{id:"isin"},(0,i.kt)("inlineCode",{parentName:"h2"},"isIn")),(0,i.kt)("p",null,"Defines a set membership condition for the current field. ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," has to be a ",(0,i.kt)("inlineCode",{parentName:"p"},"Set<T>"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"T")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Date"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Datetime"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Decimal"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Double"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Integer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Long")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"String"),". ",(0,i.kt)("strong",{parentName:"p"},"Other types are not supported and will throw an exception"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch isIn(Object value)\n")),(0,i.kt)("h2",{id:"isnotin-alias-notin"},(0,i.kt)("inlineCode",{parentName:"h2"},"isNotIn")," (alias ",(0,i.kt)("inlineCode",{parentName:"h2"},"notIn"),")"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Signature")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-apex"},"FieldsMatch isNotIn(Object value)\n")))}u.isMDXComponent=!0}}]);